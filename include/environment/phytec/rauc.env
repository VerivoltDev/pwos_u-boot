/* SPDX-License-Identifier: GPL-2.0+ */

doraucboot=0

raucdev=0
raucslot=system0
raucbootpart0=1
raucrootpart0=5
raucbootpart1=2
raucrootpart1=6

init_rauc=
	test -n ${BOOT_ORDER} || setenv BOOT_ORDER system0 system1;
	test -n ${BOOT_system0_LEFT} || setenv BOOT_system0_LEFT 3;
	test -n ${BOOT_system1_LEFT} || setenv BOOT_system1_LEFT 3;
	setenv raucstatus;
	for BOOT_SLOT in ${BOOT_ORDER}; do
		if test x${raucstatus} != x; then
			echo Skipping remaing slots!;
		elif test x${BOOT_SLOT} = xsystem0; then
			if test ${BOOT_system0_LEFT} -gt 0; then
				echo Found valid slot A,
					${BOOT_system0_LEFT} attempts remaining;
				setexpr BOOT_system0_LEFT ${BOOT_system0_LEFT} - 1;
				setenv bootpart ${raucbootpart0};
				setenv mmcroot ${raucrootpart0};
				setenv raucslot system0;
				setenv raucstatus success;
			fi;
		elif test x${BOOT_SLOT} = xsystem1; then
			if test ${BOOT_system1_LEFT} -gt 0; then
				echo Found valid slot B,
					${BOOT_system1_LEFT} attempts remaining;
				setexpr BOOT_system1_LEFT ${BOOT_system1_LEFT} - 1;
				setenv bootpart ${raucbootpart1};
				setenv mmcroot ${raucrootpart1};
				setenv raucslot system1;
				setenv raucstatus success;
			fi;
		fi;
	done;
	if test -n ${raucstatus}; then
		env delete raucstatus;
		saveenv;
		setenv optargs ${optargs} rauc.slot=${raucslot};
		setenv mmcdev ${raucdev};
	else
		echo WARN: No valid slot found;
		setenv BOOT_system0_LEFT 3;
		setenv BOOT_system1_LEFT 3;
		env delete raucstatus;
		saveenv;
		reset;
	fi;
