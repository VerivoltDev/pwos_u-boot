#include <environment/ti/ti_armv7_common.env>
#include <environment/phytec/rauc.env>

name_kern=Image
console=ttyS2,115200n8
fdtfile=CONFIG_DEFAULT_FDT_FILE
args_all=setenv optargs ${optargs} earlycon=ns16550a,mmio32,0x02800000
run_kern=booti ${loadaddr} ${rd_spec} ${fdtaddr}

boot=mmc
mmcdev=0
bootpart=1
mmcroot=2
boot_prefixes=/ /boot/

rd_spec=-
mmcrootfstype=ext4 rootwait
args_mmc=setenv bootargs console=${console} ${optargs}
	root=/dev/mmcblk${mmcdev}p${mmcroot} rw
	rootfstype=${mmcrootfstype}

init_mmc=
	if test ${doraucboot} = 1; then run init_rauc; fi;
	run args_all args_mmc

get_fdt_mmc=load mmc ${mmcdev}:${bootpart} ${fdtaddr} ${fdtfile}
get_overlay_mmc=
	fdt address ${fdtaddr};
	fdt resize 0x100000;
	for overlay in $overlays;
	do
	  if test -e mmc ${mmcdev} ${overlay}; then
	    load mmc ${mmcdev}:${bootpart} ${dtboaddr} ${overlay} &&
	    fdt apply ${dtboaddr};
	  else
	    echo "Warning: Overlay ${overlay} does not exist";
	  fi;
	done;
#ifdef CONFIG_CMD_EXTENSION
get_extension_mmc=
	setenv extension_overlay_addr ${dtboaddr};
	setenv extension_overlay_cmd 'load mmc ${mmcdev}:${bootpart}
	  ${dtboaddr} ${extension_overlay_name}';
	extension scan;
	extension apply all;
#else
get_extension_mmc=echo "no extension command"
#endif

get_kern_mmc=load mmc ${mmcdev}:${bootpart} ${loadaddr} ${name_kern}
get_fit_mmc=load mmc ${mmcdev}:${bootpart} ${addr_fit} ${name_fit}

get_rd_spi=sf read ${rdaddr} 0x1e00000 ${size_fs}
get_fdt_spi=sf read ${fdtaddr} 0x740000 ${size_fdt}
get_kern_spi=sf read ${loadaddr} 0x800000 ${size_kern}
get_extension_spi=echo "extensions not supported with SPI"
get_overlay_spi=echo "overlays not supported with SPI"

args_spi=setenv bootargs console=${console} ${optargs}
init_spi=run args_all args_spi; sf probe; run get_rd_spi;
	setenv run_kern booti ${loadaddr} ${rdaddr}:0x${size_fs} ${fdtaddr}

serverip=192.168.3.10
ipaddr=192.168.3.11
netmask=255.255.255.0
nfsroot=/nfsroot

args_net=setenv bootargs console=${console} root=/dev/nfs ip=dhcp rw
	nfsroot=${serverip}:${nfsroot},vers=4,tcp
init_net=run args_all args_net; setenv autoload no; dhcp;
get_kern_net=tftp $loadaddr ${serverip}:/${name_kern}
get_fdt_net=tftp $fdtaddr ${serverip}:/${fdtfile}
get_overlay_net=
	fdt address ${fdtaddr};
	fdt resize 0x100000;
	for overlay in $overlays;
	do;
	  tftp ${dtboaddr} ${serverip}:/${overlay} &&
	  fdt apply ${dtboaddr};
	done;
#ifdef CONFIG_CMD_EXTENSION
get_extension_net=
	setenv extension_overlay_addr ${dtboaddr};
	setenv extension_overlay_cmd 'tftp ${dtboaddr}
	  ${serverip}:/${extension_overlay_name}';
	extension scan;
	extension apply all;
#else
get_extension_net=echo "no extension command"
#endif




pw_pressed_button=
	gpio set gpio@600000_26;
	setenv pressed_counter 0; 
	setenv blink_delay 0;
	setenv button 0;  
	while itest ${button} == 0; do
		if gpio input 165; then
			setenv button 0;
			setexpr blink_delay ${blink_delay} + 1;
			if test ${blink_delay} = 100; then
				gpio toggle gpio@600000_26;
				setenv blink_delay 0;
				setexpr pressed_counter ${pressed_counter} + 1;
				if test ${pressed_counter} > 5; then
					setenv button 1;
				fi;
			fi;
		else setenv button 1;
		fi;
	done;
	setenv button 0; 
	printenv pressed_counter;
	if test ${pressed_counter} > 5; then
		run pw_usb_recovery;
	else
		run init_${boot}; 
		run get_kern_${boot}; 
		run get_fdt_${boot}; 
		run get_overlay_${boot}; 
		run get_extension_${boot}; 
		print mmcroot; 
		run run_kern;
	fi;



pw_gpio_config=mw 0x000F423C 0x00050007; mw 0x000F4068 0x00050007
pw_gpio_test=
	gpio set gpio@600000_26; 
	if gpio input gpio@601000_55; then 
		setenv bootpart 2; 
		setenv mmcroot 2; 
	fi;

bootcmd=
	run pw_gpio_config; 
	run pw_pressed_button;
	
pw_usb_recovery=
	usb reset;
	setenv loadaddr 0xA0000000;
	fatload usb 0:1 ${loadaddr} fsroot.ext4;
	setexpr num_blocks ${filesize} / 0x200;
	mmc dev 0;
	mmc write ${loadaddr} 0x44000 ${num_blocks};
	reset;
